1. API 도큐먼트에 대한 설명으로 틀린 것은 무엇입니까?

➊ 자바 표준 라이브러리를 프로그램에서 어떻게 사용할 수 있는지를 설명하고 있다. 
➋ 클래스의 상속 관계 및 자식 클래스들이 무엇이 있는지 알 수 있다.
➌ 생성자 선언부, 필드의 타입, 메소드의 선언부를 확인할 수 있다.
➍ public, protected, default, private 접근 제한을 가지는 멤버들을 확인할 수 있다.

답 : 4
-------------------------------------------------------------------------
2. java.base 모듈에 대한 설명으로 틀린 것은 무엇입니까?

➊ 모든 표준 모듈이 의존하는 기본 모듈이다.
➋ 모듈 기술자에 requires를 하지 않아도 사용할 수 있는 모듈이다.
➌ java.base의 패키지에는 java.lang, java.util, java.io, java.net, java.sql 등이 있다. 
➍ java.lang 패키지를 제외한 다른 패키지는 import 문을 필요로 한다.

답 : 3
-------------------------------------------------------------------------
3. Object 클래스에 대한 설명 중 틀린 것은 무엇입니까?

➊ 모든 자바 클래스의 최상위 부모 클래스이다.
➋ Object의 equals ( ) 메소드는 == 연산자와 동일하게 번지를 비교한다. 
➌ Object의 hashCode ( ) 메소드는 동등 비교 시 활용된다.
➍ Object의 toString ( ) 메소드는 객체의 필드값을 문자열로 리턴한다.

답 : 4
-------------------------------------------------------------------------
4. 객체의 동등 비교를 위해 Object의 equals ( )와 hashCode ( ) 메소드를 오버라이딩했다고
 가정할경우,메소드호출순서를생각하고다음 ( ) 안을채워보세요.
 
답 : hashCode, equals
-------------------------------------------------------------------------
7. System 클래스에 대한 설명 중 틀린 것은 무엇입니까?

➊ System 클래스는 정적 필드와 정적 메소드만 제공한다.
➋ System.out은 콘솔에 출력할 때, System.in은 키보드에서 입력받을 때 사용한다. 
➌ milisTime ( )과 nanoTime ( ) 메소드는 현재 시간에 대한 long값을 리턴한다.
➍ exit ( ) 메소드는 프로세스(JVM )를 종료시킨다.

답 : 3
-------------------------------------------------------------------------
9. 다음 바이트 배열은 UTF-8 문자셋으로 인코딩한 데이터로, 다시 문자열로 디코딩해서 
변수 data 에 저장하려고 합니다.  밑줄 친 곳에 들어갈 코드를 작성해보세요.

답 : new String(bytes, "UTF-8")
-------------------------------------------------------------------------
12. 숫자 100과 300으로 각각 박싱된 Integer 객체를 == 연산자로 비교한 결과 100을 박싱한 Integer 객체는 true가 나오지만, 
300을 박싱한 Integer 객체는 false가 나왔습니다. 그 이유를 설명하고, 값만 비교할 수 있도록 코드를 수정해보세요.

답 :  값의 범위가 -128~127이면 ==은 값을 비교하고 그 이외에는 번지를 비교하기 때문이다.
-------------------------------------------------------------------------
13. Math 클래스가 제공하는 메소드의 리턴값이 잘못된 것은 무엇입니까?

➊ Math.ceil (5.3 )  6.0
➋ Math.floor (5.3 )  5.0
➌ Math.max (5.3, 2.5 )  5.3 
➍ Math.round (5.7 )  6.0

답 : 4
-------------------------------------------------------------------------
14. 난수를 얻는 방법을 잘못 설명한 것은 무엇입니까?

➊ Math.random ( ) 메소드는 0.0 <= ... < 1.0 사이의 실수 난수를 리턴한다.
➋ Random의 nextDouble ( ) 메소드는 0.0 <= ... < 1.0 사이의 실수 난수를 리턴한다. 
➌ Random의 nextInt ( ) 메소드는 int 타입의 허용 범위에서 난수를 리턴한다.
➍ Random의 nextInt (int n ) 메소드는 0<= ... <=n 사이의 정수 난수를 리턴한다.

답 : 4
-------------------------------------------------------------------------
17. 정규 표현식을 이용해 첫 번째는 알파벳으로 시작하고 
두 번째부터 숫자와 알파벳으로 구성된 8~12자 사이의 ID 값인지 검사하고 싶습니다. 
알파벳은 대소문자를 모두 허용한다고 할 때, 다음 밑줄에 들어갈 코드를 작성해보세요.

답 : "[a-zA-Z][a-zA-Z0-9]{7,11}", Pattern.matches(regExp, id)
-------------------------------------------------------------------------
18. Class 객체에 대한 설명 중 틀린 것은 무엇입니까?

➊ Class.forName ( ) 메소드 또는 객체의 getClass ( ) 메소드로 얻을 수 있다. 
➋ 패키지와 클래스 이름을 알 수 있다.
➌ 클래스의 생성자, 필드, 메소드에 대한 정보를 알아낼 수 있다.
➍ getResource ( ) 메소드는 프로젝트 경로를 기준으로 리소스의 URL을 리턴한다.

답 : 4
-------------------------------------------------------------------------
19. 어노테이션(Annotation)에 대한 설명 중 틀린 것은 무엇입니까?

➊ 컴파일하거나 실행할 때 어떻게 처리해야 할 것인지를 알려주는 역할을 한다.
➋ 클래스, 필드, 생성자, 메소드를 선언하기 전에 @어노테이션을 붙일 수 있다.
➌ @어노테이션(“*”)일 경우 value 속성값이 *가 된다.
➍ @어노테이션(“*”, prop=3 )일 경우 value 속성값은 *, prop 속성값은 3이 된다.

답 : 4
-------------------------------------------------------------------------

