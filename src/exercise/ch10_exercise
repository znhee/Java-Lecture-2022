1. 자바 라이브러리에 대한 설명으로 틀린 것은 무엇입니까?

➊ 일반적으로 JAR (~.jar ) 파일 형태로 존재한다.
➋ JAR 파일 안에는 클래스 및 인터페이스의 소스 파일이 있다.
➌ 라이브러리에 포함된 모든 패키지는 프로그램에서 접근이 가능하다.
➍ 이클립스 프로젝트에서 사용할 경우 Build Path에 JAR 파일을 추가한다.

답 : 2
-------------------------------------------------------------------------
2. 모듈에 대한 설명으로 틀린 것은 무엇입니까?

➊ 모듈은 패키지 관리 기능까지 포함된 라이브러리라고 볼 수 있다. 
➋ 모듈에 포함된 일부 패키지는 은닉해서 접근할 수 없도록 할 수 있다. 
➌ 모듈은 모듈 기술자가 반드시 존재할 필요는 없다.
➍ 모듈도 라이브러리이므로 JAR 파일 형태로 배포될 수 있다.

답 : 3
-------------------------------------------------------------------------
3. 모듈 기술자(module-info.java)에 기술되는 내용으로 틀린 것은 무엇입니까?

➊ exports는 외부에서 접근할 수 있는 패키지를 기술한다. ➋ requires는 의존 모듈을 기술한다.
➌ requires를 기술할 때에는 exports를 기술할 수 없다. 	➍ transitive는 전이 의존 모듈을 기술한다.

답 : 3
-------------------------------------------------------------------------
4. 집합 모듈에 대한 설명으로 틀린 것은 무엇입니까?

➊ 한번의 의존 설정으로 여러 모듈을 사용할 수 있도록 해준다.
➋ 집합 모듈 기술자에는 requires transitive로 의존 모듈을 기술한다.
➌ 집합 모듈 기술자에는 requires transitive로 다른 집합 모듈을 기술할 수 있다. 
➍ 집합 모듈을 의존 설정할 경우에는 다른 모듈을 의존 설정할 수 없다.

답 : 4
-------------------------------------------------------------------------
5. 자바 표준 모듈에 대한 설명으로 틀린 것은 무엇입니까?

➊ java.base 모듈은 기본 모듈이므로 requires하지 않아도 사용할 수 있다. 
➋ java.base 모듈에 속한 패키지는 import 없이도 사용할 수 있다.
➌ java.se 모듈은 JDK의 전체 모듈을 사용할 수 있도록 구성된 집합 모듈이다. 
➍ 자바 표준 모듈은 작은 자바 실행 환경을 만들기 위해 설계되었다.

답 : 2
-------------------------------------------------------------------------